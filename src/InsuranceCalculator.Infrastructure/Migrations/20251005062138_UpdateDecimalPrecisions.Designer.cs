// <auto-generated />
using System;
using InsuranceCalculator.Infrastructure.Persistence.EF.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InsuranceCalculator.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251005062138_UpdateDecimalPrecisions")]
    partial class UpdateDecimalPrecisions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InsuranceCalculator.Domain.Entities.InsuranceManagement.CoverageDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Maximum")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Maximum");

                    b.Property<decimal>("Minimum")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Minimum");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar");

                    b.Property<decimal>("PremiumRate")
                        .HasPrecision(18, 5)
                        .HasColumnType("decimal(18,5)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CoverageDefinition", (string)null);
                });

            modelBuilder.Entity("InsuranceCalculator.Domain.Entities.InsuranceManagement.CoverageItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Capital")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Capital");

                    b.Property<Guid>("CoverageDefinitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InsuranceRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Premium")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Premium");

                    b.HasKey("Id");

                    b.HasIndex("CoverageDefinitionId");

                    b.HasIndex("InsuranceRequestId", "CoverageDefinitionId")
                        .IsUnique();

                    b.ToTable("CoverageItems", (string)null);
                });

            modelBuilder.Entity("InsuranceCalculator.Domain.Entities.InsuranceManagement.InsuranceRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("InsuranceRequests", (string)null);
                });

            modelBuilder.Entity("InsuranceCalculator.Domain.Entities.UserManagement.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar");

                    b.Property<Guid>("Token")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("InsuranceCalculator.Domain.Entities.InsuranceManagement.CoverageItem", b =>
                {
                    b.HasOne("InsuranceCalculator.Domain.Entities.InsuranceManagement.CoverageDefinition", "CoverageDefinition")
                        .WithMany("CoverageItems")
                        .HasForeignKey("CoverageDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InsuranceCalculator.Domain.Entities.InsuranceManagement.InsuranceRequest", "InsuranceRequest")
                        .WithMany("Items")
                        .HasForeignKey("InsuranceRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoverageDefinition");

                    b.Navigation("InsuranceRequest");
                });

            modelBuilder.Entity("InsuranceCalculator.Domain.Entities.InsuranceManagement.InsuranceRequest", b =>
                {
                    b.HasOne("InsuranceCalculator.Domain.Entities.UserManagement.User", "User")
                        .WithMany("InsuranceRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InsuranceCalculator.Domain.Entities.InsuranceManagement.CoverageDefinition", b =>
                {
                    b.Navigation("CoverageItems");
                });

            modelBuilder.Entity("InsuranceCalculator.Domain.Entities.InsuranceManagement.InsuranceRequest", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("InsuranceCalculator.Domain.Entities.UserManagement.User", b =>
                {
                    b.Navigation("InsuranceRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
